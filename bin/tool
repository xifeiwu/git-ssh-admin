#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const readline = require('readline');
const commander = require('commander');
const bytes = require('bytes');
const utils = require('../lib/utils');
const config = require('../config.js');

commander.addImplicitHelpCommand();

commander.command('addUser <pathOfPubicKey>').action(async (pathOfPubicKey) => {
  if (!fs.existsSync(pathOfPubicKey)) {
    console.log(`${pathOfPubicKey} not exist!`);
    return;
  }
  const [type, key, name] = fs.readFileSync(pathOfPubicKey).toString().replace('\n', '').split(' ');
  utils.addCommand(type, key, name);
});

commander.command('checkSync').action(async() => {
  try {
    utils.checkSync();
  } catch (err) {
    console.log(err);
  }
});

commander.command('repoSize').action(async() => {
  try {
    const results = await utils.repoSize();
    results.sort((pre, next) => next.size - pre.size);
    results.forEach(it => {
      console.log(`${bytes(it.size)}\t\t${it.dir}`);
    });
    const total = results.reduce((sum, it) => sum + it.size, 0);
    console.log(`total: ${bytes(total)}`);
  } catch (err) {
    console.log(err);
  }
});

commander.command('start-http-server')
  .option('-d, --repo-dir <dir>', 'repoDir for repositories')
  .action(async (command) => {
    const {repoDir} = command;
    const REPO_DIR = repoDir ? repoDir : config.REPO_DIR;

    try {
      fs.statSync(REPO_DIR);
    } catch (err) {
      throw new Error(`REPO_DIR ${REPO_DIR} not exist!`);
      return;
    }

    const auth = {
      username: '',
      password: ''
    }
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    for (let key in auth) {
      auth[key] = await new Promise((resolve, reject) => {
        rl.question(`${key}:`, (answer) => {
          resolve(answer);
        });
      });
    }
    rl.close();

    const GitServer = require('../lib/git-server-by-http.js');
    (new GitServer()).start(REPO_DIR, auth);
  });


commander.parse(process.argv);
